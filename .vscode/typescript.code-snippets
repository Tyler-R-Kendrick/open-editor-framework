{
  "Accessibility Helper": {
    "prefix": "a11y-helper",
    "body": [
      "// Announce to screen reader",
      "AccessibilityHelper.announceToScreenReader('${1:message}', '${2:polite}');",
      "",
      "// Make element focusable",
      "AccessibilityHelper.makeElementFocusable(${3:element});",
      "",
      "// Add keyboard navigation",
      "AccessibilityHelper.addKeyboardNavigation(${4:element}, (e) => {",
      "  ${5:// Handle keyboard event}",
      "});"
    ],
    "description": "Add accessibility helpers"
  },
  "Touch Gesture Handler": {
    "prefix": "touch-gesture",
    "body": [
      "private touchGestureRecognizer = new TouchGestureRecognizer();",
      "",
      "private handleTouchStart = (e: TouchEvent) => {",
      "  const touch = e.touches[0];",
      "  if (!touch) return;",
      "  ",
      "  this.touchGestureRecognizer.handleTouchStart(touch);",
      "  this.touchGestureRecognizer.onLongPress = (gesture) => {",
      "    ${1:// Handle long press}",
      "  };",
      "};",
      "",
      "private handleTouchMove = (e: TouchEvent) => {",
      "  const touch = e.touches[0];",
      "  if (!touch) return;",
      "  ",
      "  const gesture = this.touchGestureRecognizer.handleTouchMove(touch);",
      "  ${2:// Handle pan gesture}",
      "};",
      "",
      "private handleTouchEnd = (e: TouchEvent) => {",
      "  const touch = e.changedTouches[0];",
      "  if (!touch) return;",
      "  ",
      "  const gesture = this.touchGestureRecognizer.handleTouchEnd(touch);",
      "  if (gesture) {",
      "    switch (gesture.type) {",
      "      case 'tap':",
      "        ${3:// Handle tap}",
      "        break;",
      "      case 'swipe':",
      "        ${4:// Handle swipe}",
      "        break;",
      "    }",
      "  }",
      "};"
    ],
    "description": "Add touch gesture recognition"
  },
  "Component Helper": {
    "prefix": "component-helper",
    "body": [
      "// Create new component",
      "const component = ComponentHelper.createComponent(",
      "  '${1:type}',",
      "  { x: ${2:0}, y: ${3:0}, width: ${4:100}, height: ${5:50} },",
      "  { ${6:// properties} }",
      ");",
      "",
      "// Check if point is in bounds",
      "const isInBounds = ComponentHelper.isPointInBounds(",
      "  { x: ${7:x}, y: ${8:y} },",
      "  component.bounds",
      ");",
      "",
      "// Get bounds center",
      "const center = ComponentHelper.getBoundsCenter(component.bounds);"
    ],
    "description": "Add component management helpers"
  },
  "Event Dispatcher": {
    "prefix": "dispatch-event",
    "body": [
      "this.dispatchEvent(new CustomEvent('${1:event-name}', {",
      "  detail: { ${2:data} },",
      "  bubbles: ${3:true}",
      "}));"
    ],
    "description": "Dispatch a custom event"
  },
  "CSS Media Query": {
    "prefix": "css-media",
    "body": [
      "/* ${1:Description} */",
      "@media (${2:max-width: 768px}) {",
      "  ${3:/* Mobile styles */}",
      "}",
      "",
      "@media (pointer: coarse) {",
      "  ${4:/* Touch device styles */}",
      "}",
      "",
      "@media (prefers-reduced-motion: reduce) {",
      "  ${5:/* Reduced motion styles */}",
      "}",
      "",
      "@media (prefers-contrast: high) {",
      "  ${6:/* High contrast styles */}",
      "}"
    ],
    "description": "Add responsive and accessible media queries"
  },
  "Test Case": {
    "prefix": "test-case",
    "body": [
      "describe('${1:ComponentName}', () => {",
      "  it('should ${2:test description}', () => {",
      "    ${3:// Arrange}",
      "    ",
      "    ${4:// Act}",
      "    ",
      "    ${5:// Assert}",
      "    expect(${6:actual}).toBe(${7:expected});",
      "  });",
      "});"
    ],
    "description": "Create a test case"
  }
}